
    public Routine CreateCubeOnlyRoutine(boolean pRequiresUserInput, double pLowerUpToScore, double pUpperUpToScore)
    {
        
        ClampStep releaseClamp = mStepFactory.ClampStepsFactory.CreateReleaseClampStep("InitalClampRelease");
        ClampStep closeClamp = mStepFactory.ClampStepsFactory.CreateCloseClampStep("FinalClampRelease");

        TimeDelayStep pauseBeforeUpperArmGoesToScore = mStepFactory.TimeDelayStepsFactory.CreatePauseBeforeUpperArmGoesToScoreStep("pauseBeforeUpperArmGoesToScore");
        TimeDelayStep pauseBeforeLowerArmGoesToScore = mStepFactory.TimeDelayStepsFactory.CreateParameterizedPause("pauseBeforeLowerArmGoesToScore", 125);
  
        ClawStep initialOpen = mStepFactory.ClawStepsFactory.CreateOpenClawStep("InitialOpen", 0);
        ClawStep grab = mStepFactory.ClawStepsFactory.CreateCloseClawStep("Grab", 600);
        ClawStep releaseToScore = mStepFactory.ClawStepsFactory.CreateOpenClawStep("ReleaseToScore", 1000);

        ArmMovementComponentStep upperJointDownToGrabLocationStep = mStepFactory.UpperJointStepsFactory.CreateUpperDownToGrabLocationStepForCube();
        
        ArmMovementComponentStep upperJointUpToScore = mStepFactory.UpperJointStepsFactory.CreateUpperScoreParameterized(pUpperUpToScore);
        ArmMovementComponentStep upperJointBackToIntake = mStepFactory.UpperJointStepsFactory.CreateUpperIntakingStep();


        ArmMovementComponentStep lowerJointDownToGrabLocationStep = mStepFactory.LowerJointStepsFactory.CreateLowerDownToGrabLocationStep();
        ArmMovementComponentStep lowerJointScoochBackwards2 = mStepFactory.LowerJointStepsFactory.CreateLowerJointBackwardsToScoreStep("lowerJointScoochBackwardsToAllowArmUp2");    
        ArmMovementComponentStep lowerJointUpToScore = mStepFactory.LowerJointStepsFactory.CreateLowerScoreParameterized(pLowerUpToScore);
        ArmMovementComponentStep lowerJointRetractToAllowUpperToFall = mStepFactory.LowerJointStepsFactory.CreateLowerJointRetractionStep();
        ArmMovementComponentStep lowerJointBackToIntake = mStepFactory.LowerJointStepsFactory.CreateLowerIntakeStep();

        UserInputStep pressToRelease = mStepFactory.UserInputStepsFactory.CreateUserInputStep();
        
        upperJointDownToGrabLocationStep.AddPrerequisite(new StepPrequisite(initialOpen, 5, -5));
        lowerJointDownToGrabLocationStep.AddPrerequisite(new StepPrequisite(initialOpen, 5, -5));
        grab.AddPrerequisite(new StepPrequisite(upperJointDownToGrabLocationStep, 0.005, -0.005));
        grab.AddPrerequisite(new StepPrequisite(lowerJointDownToGrabLocationStep, 0.005, -0.005));
        pauseBeforeUpperArmGoesToScore.AddPrerequisite(new StepPrequisite(grab, 1, -1)); 

        lowerJointScoochBackwards2.AddPrerequisite(new StepPrequisite(grab, 0.01, -0.01));
        upperJointUpToScore.AddPrerequisite(new StepPrequisite(pauseBeforeUpperArmGoesToScore, 0.01, -0.01));    
        
        pauseBeforeLowerArmGoesToScore.AddPrerequisite(new StepPrequisite(lowerJointScoochBackwards2, 1, -1));
        lowerJointUpToScore.AddPrerequisite(new StepPrequisite(pauseBeforeLowerArmGoesToScore, 0.1, -0.1));
      
        pressToRelease.AddPrerequisite(new StepPrequisite(lowerJointScoochBackwards2, 1, -1)); //this is not a strict prereq... just make sure he doesn't hit the button too early.
        if(pRequiresUserInput)
        {
            releaseToScore.AddPrerequisite(new StepPrequisite(pressToRelease, 1, -1));
        }
        releaseToScore.AddPrerequisite(new StepPrequisite(lowerJointUpToScore, 0.01, -0.01));
        releaseToScore.AddPrerequisite(new StepPrequisite(upperJointUpToScore, 0.01, -0.01));

        lowerJointRetractToAllowUpperToFall.AddPrerequisite(new StepPrequisite(releaseToScore, 0.01, -0.01));
        upperJointBackToIntake.AddPrerequisite(new StepPrequisite(lowerJointRetractToAllowUpperToFall, 0.01, -0.01));
        lowerJointBackToIntake.AddPrerequisite(new StepPrequisite(upperJointBackToIntake, 0.01, -0.01));

        closeClamp.AddPrerequisite(new StepPrequisite(upperJointBackToIntake, 0.01, -0.01));
        closeClamp.AddPrerequisite(new StepPrequisite(lowerJointBackToIntake, 0.01, -0.01));

        StepSequence upperJointStepSequence = new StepSequence("UpperArm", Arrays.asList(upperJointDownToGrabLocationStep, upperJointUpToScore, upperJointBackToIntake));
        StepSequence lowerJointStepSequence = new StepSequence("LowerArm", Arrays.asList(lowerJointDownToGrabLocationStep, lowerJointScoochBackwards2, lowerJointUpToScore, lowerJointRetractToAllowUpperToFall, lowerJointBackToIntake));
        StepSequence clawSequence = new StepSequence("Claw", Arrays.asList(initialOpen, grab, releaseToScore));
        StepSequence pauseSequence = new StepSequence("Pauses", Arrays.asList(pauseBeforeUpperArmGoesToScore));
        StepSequence pauseSequence2 = new StepSequence("Pauses2", Arrays.asList( pauseBeforeLowerArmGoesToScore));
        
        StepSequence clampSequence  = new StepSequence("Clamp", Arrays.asList(releaseClamp, closeClamp));
        StepSequence userInputSequence = new StepSequence("UserInput", Arrays.asList(pressToRelease));
       
        List<StepSequence> stepSequences;
        if(pRequiresUserInput)
        {
            stepSequences = Arrays.asList(upperJointStepSequence, lowerJointStepSequence, clawSequence, pauseSequence, clampSequence, userInputSequence, pauseSequence2);
        } 
        else
        {
            stepSequences = Arrays.asList(upperJointStepSequence, lowerJointStepSequence, clawSequence, pauseSequence, clampSequence,  pauseSequence2);
        }

        Routine returnValue = new Routine(stepSequences);
        return returnValue;
  
    }
