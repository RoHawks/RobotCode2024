
  private double  mLowerJointPIDTestTargetPosition;
  private double mUpperJointPIDTestTargetPosition;

  private void TestArmBasicPID()
  {
    double joystickAmount = mController.getRightTriggerAxis() - mController.getLeftTriggerAxis();

    SmartDashboard.putNumber("mLowerJointPIDTestTargetPosition", mLowerJointPIDTestTargetPosition);
    SmartDashboard.putNumber("mUpperJointPIDTestTargetPosition", mUpperJointPIDTestTargetPosition);

    if(mController.getRightBumper())
    {      
      //every 20 ms, move by at most 1/200th of a rotation
      //every second 25/100th of a rotation
      mLowerJointPIDTestTargetPosition += joystickAmount / 200.0;
      mLowerJointPIDController.setReference(mLowerJointPIDTestTargetPosition, ControlType.kPosition);
    }
    else
    {
      mLowerJointSparkMax.set(0);
    }


    if(mController.getLeftBumper())
    {      
      //every 20 ms, move by at most 1/200th of a rotation
      //every second 25/100th of a rotation
      mUpperJointPIDTestTargetPosition += joystickAmount / 200.0;
      mUpperJointPIDController.setReference(mUpperJointPIDTestTargetPosition, ControlType.kPosition);
    }
    else
    {
      mUpperJointSparkMax.set(0);
    }

  }


  
  private boolean mAButtonLastPressed = false;
  
  
  private void RunRoutine()
  {
    Routine routine= ScoringRoutines.GetInstance().GetRoutineForInstructions(new ScoringInstructions(GamePieceLocation.HIGH, GamePieces.CONE));
    routine.Run();
  }

  private void TestRoutines()
  {
//    mArmClamp.set(Value.kReverse);//opens

    //Routine routine= this.mSmoothRoutine;
    Routine routine= ScoringRoutines.GetInstance().GetRoutineForInstructions(new ScoringInstructions(GamePieceLocation.HIGH, GamePieces.CONE));
    if(mController.getAButton())
    {
      if(!mAButtonLastPressed)
      {
        routine.Reset();
        //System.out.println("Reset Called");
      }
      mAButtonLastPressed = true;
      routine.Run();
    }
    else
    {
      mAButtonLastPressed = false;
      mLowerJointSparkMax.set(0);
      mUpperJointSparkMax.set(0);
    }
  }



  private void WristPIDToAngle(double pTargetAngle)
  {
    mWristPidController.setSetpoint(pTargetAngle);
    double wristPower = mWristPidController.calculate(ConvertWristEncoderToDegrees(mWristEncoder.getRaw()));
    mWristMotor.set(wristPower);
  }

  private void TestWristBasicPID()
  {
    double targetAngle = 0;
    if(mController.getRightBumper())
    {
      if(mController.getBButton())
      {
        targetAngle = 60;
      }
      else if(mController.getXButton())
      {
        targetAngle = -60;
      }
      WristPIDToAngle(targetAngle);
    }
    else
    {
      mWristMotor.set(0);
    }

  }

  private void UpperJointSmartMotionUp()
  {
    double kDt = 0.02;

    mUpperJointGoal = new TrapezoidProfile.State(mIdealEndSpotUpperJoint, 0);

    // Create a motion profile with the given maximum velocity and maximum
    // acceleration constraints for the next setpoint, the desired goal, and the
    // current setpoint.
    var profile = new TrapezoidProfile(mUpperJointConstraints, mUpperJointGoal, mUpperJointSetpoint);

    // Retrieve the profiled setpoint for the next timestep. This setpoint moves
    // toward the goal while obeying the constraints.
    mUpperJointSetpoint = profile.calculate(kDt);
    SmartDashboard.putNumber("UpperJointSetPoint", mUpperJointSetpoint.position);
    SmartDashboard.putNumber("UpperJointSetVelocity", mUpperJointSetpoint.velocity);

    // Send setpoint to offboard controller PID
    mUpperJointPIDController.setReference(mUpperJointSetpoint.position,ControlType.kPosition);
  }

  private void UpperJointSmartMotionDown()
  {
    double kDt = 0.02;

    mUpperJointGoal = new TrapezoidProfile.State(mIdealEndSpotUpperJoint, 0);

    // Create a motion profile with the given maximum velocity and maximum
    // acceleration constraints for the next setpoint, the desired goal, and the
    // current setpoint.
    var profile = new TrapezoidProfile(mUpperJointConstraintsForBigDownMovements, mUpperJointGoal, mUpperJointSetpoint);

    // Retrieve the profiled setpoint for the next timestep. This setpoint moves
    // toward the goal while obeying the constraints.
    mUpperJointSetpoint = profile.calculate(kDt);
    SmartDashboard.putNumber("UpperJointSetPoint", mUpperJointSetpoint.position);
    SmartDashboard.putNumber("UpperJointSetVelocity", mUpperJointSetpoint.velocity);

    // Send setpoint to offboard controller PID
    mUpperJointPIDController.setReference(mUpperJointSetpoint.position,ControlType.kPosition);
  }

  private double UPPER_JOINT_SCORE_LOCATION = 0.5;
  private double UPPER_JOINT_INTAKE_LOCATION = 0.11;
  private double mIdealEndSpotUpperJoint;
  private void UpperSmartMotionTest()
  {
    if(mController.getLeftBumper())
    {
      SmartDashboard.putNumber("mIdealEndSpotUpperJoint", mIdealEndSpotUpperJoint);
      
      if(mController.getXButton())
      {
        mIdealEndSpotUpperJoint = UPPER_JOINT_SCORE_LOCATION;
        UpperJointSmartMotionUp();
      }    
      else if(mController.getAButton())
      {
        mIdealEndSpotUpperJoint = UPPER_JOINT_INTAKE_LOCATION;
        UpperJointSmartMotionDown();
      }

      
    }
    else
    {
      mUpperJointSparkMax.set(0);
    }
  }


  private double LOWER_JOINT_SCORE_LOCATION = 0.15;
  private double LOWER_JOINT_INTAKE_LOCATION = 0.10;
  private double mIdealEndSpotLowerJoint;
  private void LowerJointSmartMotion()
  {
    
    double kDt = 0.02;
    mLowerJointGoal = new TrapezoidProfile.State(mIdealEndSpotLowerJoint, 0);

      // Create a motion profile with the given maximum velocity and maximum
      // acceleration constraints for the next setpoint, the desired goal, and the
      // current setpoint.
      var profile = new TrapezoidProfile(mLowerJointConstraints, mLowerJointGoal, mLowerJointSetpoint);

      // Retrieve the profiled setpoint for the next timestep. This setpoint moves
      // toward the goal while obeying the constraints.
      mLowerJointSetpoint = profile.calculate(kDt);
      SmartDashboard.putNumber("LowerJointSetPoint", mLowerJointSetpoint.position);
      SmartDashboard.putNumber("LowerJointSetVelocity", mLowerJointSetpoint.velocity);

      // Send setpoint to offboard controller PID
      mLowerJointPIDController.setReference(mLowerJointSetpoint.position,ControlType.kPosition);
      
  }

  private void LowerJointSmartMotionTest()
  {
    

    //mIdealEndSpotUpperJoint = UPPER_JOINT_SCORE_LOCATION;
    //UpperJointSmartMotion();

    if(mController.getRightBumper())
    {
      LowerJointSmartMotion();

      if(mController.getXButton())
      {
        mIdealEndSpotLowerJoint = LOWER_JOINT_SCORE_LOCATION;
      }    
      else if(mController.getAButton())
      {
        mIdealEndSpotLowerJoint = LOWER_JOINT_INTAKE_LOCATION;
      }

      
    }
    else
    {
      mLowerJointSparkMax.set(0);
    }
  }

  private void SimplePIDArmTest()
  {
    if(mController.getLeftBumper())
    {
      if(mController.getAButton())
      {
        mUpperJointPIDController.setReference(0.25, ControlType.kPosition, 0);
      }
      else if(mController.getXButton())
      {
        mUpperJointPIDController.setReference(0.35, ControlType.kPosition, 0);
      }
      else
      {
        mUpperJointSparkMax.set(0);
      }
    }
    else
    {
      mUpperJointSparkMax.set(0);
    }

    mLowerJointSparkMax.set(0);
  }

  private void  BasicArmTests()
  {
    if(mController.getLeftBumper())
    {
      mUpperJointSparkMax.set(-0.3* (mController.getRightTriggerAxis() - mController.getLeftTriggerAxis()));
    }
    else
    {
      mUpperJointSparkMax.set(0);
    }

    if(mController.getRightBumper())
    {
      mLowerJointSparkMax.set(-0.3 * (mController.getRightTriggerAxis() - mController.getLeftTriggerAxis()));
    }
    else
    {
      mLowerJointSparkMax.set(0);
    }

  }


  public void TestClawGrabs()
  {
    mLeftFingerSolenoid.set(mController.getLeftBumper() ? Value.kReverse : Value.kForward);
    mRightFingerSolenoid.set(mController.getRightBumper() ? Value.kReverse : Value.kForward );
    mArmClamp.set(mController.getStartButton() ? Value.kReverse : Value.kForward);
  }

  public void TestLowerJoint()
  {
    mLowerJointSparkMax.set(-0.3 * (mController.getRightTriggerAxis() - mController.getLeftTriggerAxis()));
  }

  public void TestWrist()
  {
    double rawJoystickValue =  -1.0 * mController.getRightX();
    if(Math.abs(rawJoystickValue) < 0.05)
    {
      mWristMotor.set(0);
    }
    else
    {
      double massagedValue = rawJoystickValue * rawJoystickValue * (rawJoystickValue > 0.0 ? 1.0: -1.0);
      mWristMotor.set(massagedValue);
    }
  }

  public void TestWristPLG()
  {
    double joystickVal = mController.getRightTriggerAxis() - mController.getLeftTriggerAxis();
    boolean isPosiive= joystickVal > 0;
    double squaredValue= joystickVal * joystickVal;
    double limit = 18; 
    if(!isPosiive)
    {
      squaredValue *= -1.0;
    }
    if(Math.abs(squaredValue) > 0.02)
    {
      if(isPosiive)
      {
        if(mWristEncoder.getDistance() > limit)
        {
          mWristMotor.set(0);  
        }
        else
        {
          mWristMotor.set(0.1 + squaredValue/5.0);
        }
      }
      else
      {
        if(mWristEncoder.getDistance() < -limit)
        {
          mWristMotor.set(0);
        }
        else
        {
          mWristMotor.set(-0.1 + squaredValue/5.0);
        }
      }
    }
    else
    {
      mWristMotor.set(0);
    }
  }

 
  public void testFingers()
  {
    //A was open
    mLeftFingerSolenoid.set(mController.getAButton() ? Value.kForward : Value.kReverse);
    mRightFingerSolenoid.set(mController.getAButton() ? Value.kForward : Value.kReverse);
  }

  public void testPnuematics()
  {
    
      if(mController.getAButton())
      {
        mLeftFingerSolenoid.set(Value.kForward);
      }
      if(mController.getBButton())
      {
        mLeftFingerSolenoid.set(Value.kReverse);
      }
      if(mController.getXButton())
      {
        mDeploymentSolenoid.set(Value.kForward);
      }
      if(mController.getYButton())
      {
        mDeploymentSolenoid.set(Value.kReverse);
      }
      if(mController.getLeftBumper())
      {
        mRightFingerSolenoid.set(Value.kForward);
      }
      if(mController.getRightBumper())
      {
        mRightFingerSolenoid.set(Value.kReverse);
      }
      if(mController.getLeftStickButton())
      {
        mArmClamp.set(Value.kForward);//closes
      }
      if(mController.getRightStickButton())
      {
        mArmClamp.set(Value.kReverse);//opens
      }

  }

  public void testClaw()
  {
    mLeftFingerSolenoid.set(mController.getRightBumper() ? Value.kForward : Value.kReverse);
    this.mRightFingerSolenoid.set(mController.getLeftBumper() ? Value.kForward : Value.kReverse);
  }

  public void swerveAndIntake()
  {

    boolean aButton = mController.getAButton();
    boolean bButton = mController.getBButton();
    boolean xButton = mController.getXButton();
    boolean yButton = mController.getYButton();

    if(aButton || bButton || xButton || yButton)
    {
      SwerveNudgingDirection nudgeDirection = SwerveNudgingDirection.EAST;
      if(xButton)
      {
          nudgeDirection = SwerveNudgingDirection.EAST;
      }
      else if(bButton)
      {
        nudgeDirection = SwerveNudgingDirection.WEST;
      }
      else if(aButton)
      {
        nudgeDirection = SwerveNudgingDirection.SOUTH;
      }
      else
      {
        nudgeDirection = SwerveNudgingDirection.NORTH;
      }
      mSwerveDrive.Nudge(nudgeDirection);
    }
    else
    {
      mSwerveDrive.StandardSwerveDrive(mController.getLeftX(), mController.getLeftY(), mController.getRightTriggerAxis(), mController.getRightX());
    }
    

    double intakeMultiplier = 1.0;
    if(mController.getStartButton())
    {
      intakeMultiplier = 0;
    }
    else if(mController.getBackButton())
    {
      intakeMultiplier = -1.0;    
    }


       mBottomIntake.set(-0.5 * intakeMultiplier);
        mTopIntake.set(-1.0* intakeMultiplier);
        
  }
  